'use strict';

var utils = require('./lib/utils');
var fetch = require('node-fetch');
var format = require('util').format;
var debug = require('debug')('audit/rest-api-versions');
var deprecate = require('util').deprecate;

var auditLog = deprecate(require('./lib/v1/audit-log'), 'Audit log v1 APIs are deprecated. Use v2 if available on the Audit log server.');
var auditLogV2 = require('./lib/v2/audit-log');

auditLog.v2 = function (credentials, securityContext, callback) {
  // Backwards compatible.
  if (securityContext && !callback && typeof (securityContext) === 'function') {
    callback = securityContext;
    securityContext = null;
  }
  utils.validate.object(credentials, 'Credentials');
  utils.validate.callback(callback);

  if (credentials.logToConsole === true) {
    return callback(null, auditLogV2(credentials, {}, securityContext));
  }

  var uri = credentials.url + '/audit-log';
  var status = null;

  debug('Sending request to %s', uri);
  fetch(uri, {
    method: 'get',
    headers: { 'Content-Type': 'application/json' }
  }).then(function (res) {
    status = res.status;
    return res.text();
  }).then(function (body) {
    try {
      body = JSON.parse(body);
    } catch (e) {
      body = null;
    }

    debug('Response status code: %d, Body: %j',status, body);
    if (status === 404) {
      return callback(new Error('Audit log server does not support REST API v2'));
    }

    if (status !== 200) {
      return callback(new Error(format('Status code %d received when checking supported REST API versions of Audit log server: %j', status, body)));
    }

    var v2ServiceOptions = body.versions.find(function (element) {
      return credentials.user && credentials.password ? element.version === 'v2' : element.version === 'v2' && element.url.indexOf('oauth2') >= 0;
    });

    if (!v2ServiceOptions) {
      return callback(new Error('Audit log server does not support REST API v2'));
    }

    return callback(null, auditLogV2(credentials, v2ServiceOptions, securityContext));
  }).catch(function (err) {
    if (err) {
      debug('Error received:', err);
      callback(err);
    }
  });
};

module.exports = auditLog;
