'use strict';
const { toPem } = require('jks-js');
const forge = require('node-forge');

const KeySeparator = pem => {
  const separator = pem.match(/([-]+END [^\\s]+ PRIVATE KEY[-]+)|([-]+END PRIVATE KEY[-]+)/);
  return separator ? separator[0] : undefined;
};

const parseTextFormat = (content ,password = '') => {
  const pem = Buffer.from(content,'base64').toString('ascii');
  const separator = KeySeparator(pem);
  if (separator){
    const separated = pem.split(separator);
    const cert = separated[1];
    let key = separated[0] + separator;
    if (password){
      const decrypted = forge.pki.decryptRsaPrivateKey(key, password);
      key = forge.pki.privateKeyToPem(decrypted);
    }
    return  { cert, key };
  }
};

const parseBinaryFormat = (content, password) => {
  try {
    const buffer = Buffer.from(content,'base64');
    const pem = toPem(buffer, password);
    const { cert ,key }  = Object.values(pem)[0];
    return { cert, key };
  }
  catch (e) {
    // log error
    return undefined;
  }
};

const  parseCertificate = (certificateObj, password) => {
  const {  Content , Name } = certificateObj;
  const  fileExtension =  Name.split('.').pop();
  if (fileExtension !== 'pem') {
    return  parseBinaryFormat(Content,password);
  }
  return parseTextFormat(Content,password);
};

const getClientCertificates =  destinationLookUpResult  => {
  if (!destinationLookUpResult.certificates){
    return null;
  }
  const { KeyStoreLocation, TrustStoreLocation, TrustStorePassword, KeyStorePassword } = destinationLookUpResult.destinationConfiguration ;
  const { certificates } =  destinationLookUpResult ;
  const clientCertificates = {};

  certificates.forEach((certificate) => {
    let certificateType;
    if (certificate['Name'] === KeyStoreLocation){
      certificateType = 'clientCertifacate';
    }
    else if (certificate['Name'] === TrustStoreLocation){
      certificateType = 'trustCertifacate';
    }

    if (certificateType){
      const password = certificateType === 'clientCertifacate' ? KeyStorePassword : TrustStorePassword ;
      clientCertificates[certificateType] = parseCertificate(certificate,password);
    }
  });
  return clientCertificates ;
};


const escape = (destination,req) => {
  return false;          // todo caching escape logic
};

module.exports =  {
  getClientCertificates,
  escape,
  parseCertificate,
  KeySeparator,
  parseTextFormat,
  parseBinaryFormat
};
